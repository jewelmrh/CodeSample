
######################################
#pyInverseMat: Python equivalent of C++ program InverseMat
#this code is  created by Rezaul Hoque on December 22,2022;
#contact:jewelmrh@yahoo.com;rhoque4478@gmail.com;Dhaka,Bangladesh;https://rezaulhoque.com,https://hoquestake.blogspot.com
#note: codes shared by Rezaul Hoque on github are not for sale; they are created and shared to facilitate the algorithm learning process; many like Hoque use this platform to practice programming ;Rezaul hopes his contribution helps others to fine tune their learning;
#####################################
a=[[4,1,-5],[-2,3,1],[3,-1,4]]
I=[[1,0,0],[0,1,0],[0,0,1]]

for i in range (0,3):
    print("\n")
    for j in range (0,3):
       print(a[i][j],end=" ")

m11=a[1][1]*a[2][2]-a[1][2]*a[2][1]
m12= a[1][0]*a[2][2]-a[1][2]*a[2][0]
m13=a[1][0]*a[2][1]-a[1][1]*a[2][0]

m21=a[0][1]*a[2][2]-a[0][2]*a[2][1]
m22= a[0][0]*a[2][2]-a[0][2]*a[2][0]
m23=a[0][0]*a[2][1]-a[0][1]*a[2][0]

m31=a[0][1]*a[1][2]-a[0][2]*a[1][1]
m32= a[0][0]*a[1][2]-a[0][2]*a[1][0]
m33=a[0][0]*a[1][1]-a[1][0]*a[0][1]

c11=pow(-1,2)*m11
c12=pow(-1,3)*m12
c13=pow(-1,4)*m13

c21=pow(-1,3)*m21
c22=pow(-1,4)*m22
c23=pow(-1,5)*m23

c31=pow(-1,4)*m31
c32=pow(-1,5)*m32
c33=pow(-1,6)*m33
det=a[0][0]*c11+a[0][1]*c12+a[0][2]*c13

print (" \n\n",det)
c=[[c11,c12,c13],[c21,c22,c23],[c31,c32,c33]]

print(" \n")
for i in range (0,3):
    print("\n")
    for j in range (0,3):
       print(c[i][j],end=" ")


r1,c1=(3,3)
r2,c2=(3,3)
adj=[[0 for i in range (c1)] for j in range(r1)]
inv=[[0 for i in range(c2)]for j in range (r2)]
e=1/det
print("\n")
print(" {0:.7}".format(e))
for i in range (0,3):
    for j in range (0,3):
        adj[i][j]=c[j][i]

for i in range (0,3):
    print("\n")
    for j in range (0,3):
       print(adj[i][j],end=" ")
print(" \n")
for i in range (0,3):
    for j in range (0,3):
             inv[i][j] =inv[i][j]+ adj[i][j]*e

for i in range (0,3):
    print("\n")
    for j in range (0,3):
       print("{0:.7f}".format(inv[i][j]),end=" ")


