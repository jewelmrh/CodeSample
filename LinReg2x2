
//////////////////////////////////////////////////////////////////////////////
//LinReg2x2: matrix approach to solve linear regression model(2x2)
//this code is  created by Rezaul Hoque on December 13,2022
//contact:jewelmrh@yahoo.com;Dhaka,Bangladesh;https://rezaulhoque.wordpress.com,https://hoquestake.blogspot.com
//note: codes shared by Rezaul Hoque on rextester are not for sale; they are created and shared to facilitate the algorithm learning process; many like Hoque use this platform to practice programming ;Rezaul hopes his contribution helps others to fine tune their learning;
/////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
 
int main()
{
    float y[13][1]={1.3,1.2,1.4,1.4,1.5,1.9,2.6,2.3,2.5,2.7,2.1,1.8,2.2};
float x[13][2]={1,6.2,1,7.8,1,5.8,1,5.7,1,5.0,1,4.0,1,3.2,1,3.6,1,3.3,1,3.3,1,5.6,1,6.8,1,5.6};
std::cout<<"\nX:\n";
for(int i=0;i<13;i++){
   std::cout<<"\n";
  for(int j=0;j<2;j++)
     std::cout<<x[i][j]<<" ";
}
std::cout<<"\nY:\n";
for(int i=0;i<13;i++){
   std::cout<<"\n";
  for(int j=0;j<1;j++)
     std::cout<<y[i][j]<<" ";
}
float trx[2][13];

for(int i=0;i<2;i++){
  for(int j=0;j<13;j++)
    trx[i][j]=x[j][i];
}
std::cout<<"\nTranspose of X:\n";
for(int i=0;i<2;i++){
   std::cout<<"\n";
  for(int j=0;j<13;j++)
     std::cout<<trx[i][j]<<" ";
}

float xx[2][2];

for(int i=0;i<2;i++)
  for(int j=0;j<2;j++){
       xx[i][j]=0;
       for(int k=0;k<13;k++)
          xx[i][j]=xx[i][j]+trx[i][k]*x[k][j];
   }

std::cout<<"\n\nx'x:\n";
for(int i=0;i<2;i++){
   std::cout<<" \n";
  for(int j=0;j<2;j++)
       std::cout<<xx[i][j]<<" ";
}
float xy[2][1];

for(int i=0;i<2;i++)
  for(int j=0;j<1;j++){
       xy[i][j]=0;
       for(int k=0;k<13;k++)
          xy[i][j]=xy[i][j]+trx[i][k]*y[k][j];
   }


std::cout<<"\n\nx'y:\n";
for(int i=0;i<2;i++){
   std::cout<<" \n";
  for(int j=0;j<1;j++)
       std::cout<<xy[i][j]<<" ";
}

int m11=xx[1][1];
int m12= xx[1][0];

int m21=xx[0][1];
int m22= xx[0][0];

int c11=pow(-1,2)*m11;
int c12=pow(-1,3)*m12;
int c21=pow(-1,3)*m21;
int c22=pow(-1,4)*m22;

int det=xx[0][0]*c11+xx[0][1]*c12;
std::cout<<"\n\ndet "<<det;
int c[2][2]={c11,c12,c21,c22};

for(int i=0;i<2;i++){
   std::cout<<"\n";
  for(int j=0;j<2;j++)
     std::cout<<c[i][j]<<" ";
}
std::cout<<"\n";
int adj[2][2];
for(int i=0;i<2;i++)
  for(int j=0;j<2;j++)
     adj[i][j]=c[j][i];

std::cout<<"\n";
for(int i=0;i<2;i++){
   std::cout<<"\n";
  for(int j=0;j<2;j++)
     std::cout<<adj[i][j]<<" ";
}
long double e=pow(det,-1);
std::cout<<std::fixed<<std::setprecision(7)<<"\n1/det :"<<e;

long double inv[2][2];

for(int i=0;i<2;i++)
  for(int j=0;j<2;j++)
     inv[i][j]=adj[i][j]*e;


std::cout<<" \n Inverse of x'x:\n";
for(int i=0;i<2;i++){
   std::cout<<"\n";
  for(int j=0;j<2;j++)
     std::cout<<std::fixed<<std::setprecision(7)<<inv[i][j]<<" ";
}
float b[2][1];

for(int i=0;i<2;i++)
  for(int j=0;j<1;j++){
       b[i][j]=0;
       for(int k=0;k<2;k++)
          b[i][j]=b[i][j]+inv[i][k]*xy[k][j];
   }

std::cout<<"\n\nb:\n";
for(int i=0;i<2;i++){
   std::cout<<" \n";
  for(int j=0;j<1;j++)
       std::cout<<std::fixed<<std::setprecision(7)<<b[i][j]<<" ";
}
float ysq,residsq,bxy[1][1];
float trb[1][2];
for (int i=0;i<13;i++)
   for(int j=0;j<1;j++)
     ysq=y[i][j]*y[i][j];

for(int i=0;i<1;i++)
  for(int j=0;j<1;j++){
       bxy[i][j]=0;
       for(int k=0;k<2;k++)
          bxy[i][j]=bxy[i][j]+trb[i][k]*xy[k][j];
   }
residsq=ysq-bxy[0][0];
float variance=residsq/11;
std::cout<<"\nVariance : "<<variance;

std::cout<<"\nVariance-Covariance matrix:\n";
float varinv[2][2];

for(int i=0;i<2;i++)
  for(int j=0;j<2;j++){
          varinv[i][j]=variance*inv[i][j];
   }
for(int i=0;i<2;i++){
   std::cout<<"\n";
  for(int j=0;j<2;j++)
     std::cout<<std::fixed<<std::setprecision(7)<<varinv[i][j]<<" ";
}
std::cout<<"\nStandard error of b2: "<<sqrt(varinv[1][1]);
float sumy=0;
for(int i=0;i<13;i++)
 for(int j=1;j<2;j++)
   sumy += y[i][j];
float avy=sumy/13;
float num=bxy[0][0]-13*avy*avy;
float den=ysq-13*avy*avy;
float rsq=num/den;
std::cout<<"\nCoefficient of Determination:\n"<<rsq;
return 0;

}
