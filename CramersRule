//g++  7.4.0
/////////////////////////////////////////////////////////////////////////
//Cramer's rule
//Pseudocode:
//   -create a 3x3 array holding 9 elements
//   -create a 3x1 array to hold the constants
//   -print the array
//   -calculate the minors along the first row
//   -calculate the cofactors along the first row
//   -calculate the determinant
//   - Let ax be another 3x3 array
//   - copy every elements of original array to ax
//   -replace the first column of ax with the constant array(3x1)
//   -calculate the minors along the first row
//   -calculate the cofactors along the first row
//   -calculate the determinant of ax
//   -print the result
//   - for y and z create two 3x3 arrays
//   - repeat the subsequent steps as for ax
//   - to get x divide determinant of ax by determinant of original array
//   - repeat the steps for getting y and z
//   - print the results
// this code is  created by Rezaul Hoque on November 29,2022
//contact:jewelmrh@yahoo.com;rhoque4478@gmail.com;Dhaka,Bangladesh;https://rezaulhoque.wordpress.com,https://hoquestake.blogspot.com
//note: codes shared by Rezaul Hoque on github are not for sale; they are created and shared to facilitate the algorithm learning process; many like Hoque use this platform to practice programming ;Rezaul hopes his contribution helps others to fine tune their learning;
/////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <cmath>

int main()
{
   int a[3][3]={5,-3,2,-2,3,-5,4,-5,6,};
 int b[3][1]={16,2,7};
for(int i=0;i<3;i++){
   std::cout<<"\n";
  for(int j=0;j<3;j++)
     std::cout<<a[i][j]<<" ";
}

int m11=a[1][1]*a[2][2]-a[1][2]*a[2][1];

int m12= a[1][0]*a[2][2]-a[1][2]*a[2][0];

int m13=a[1][0]*a[2][1]-a[1][1]*a[2][0];

int c11=pow(-1,2)*m11;
int c12=pow(-1,3)*m12;
int c13=pow(-1,4)*m13;
int detA=a[0][0]*c11+a[0][1]*c12+a[0][2]*c13;
std::cout<<" \n"<<detA;

//solving for x
int ax[3][3];
for(int i=0;i<3;i++)
  for(int j=0;j<3;j++)
     ax[i][j]=a[i][j];

for (int i=0;i<3;i++)
   ax[i][0]=b[i][0];

int mx11=ax[1][1]*ax[2][2]-ax[1][2]*ax[2][1];

int mx12= ax[1][0]*ax[2][2]-ax[1][2]*ax[2][0];

int mx13=ax[1][0]*ax[2][1]-ax[1][1]*ax[2][0];

int cx11=pow(-1,2)*mx11;
int cx12=pow(-1,3)*mx12;
int cx13=pow(-1,4)*mx13;
int detAx=ax[0][0]*cx11+ax[0][1]*cx12+ax[0][2]*cx13;


for(int i=0;i<3;i++){
   std::cout<<"\n";
  for(int j=0;j<3;j++)
     std::cout<<ax[i][j]<<" ";
}

std::cout<<" \n"<<detAx;

//solving for y
int ay[3][3];
for(int i=0;i<3;i++)
  for(int j=0;j<3;j++)
     ay[i][j]=a[i][j];

for (int i=0;i<3;i++)
   ay[i][1]=b[i][0];

int my11=ay[1][1]*ay[2][2]-ay[1][2]*ay[2][1];

int my12= ay[1][0]*ay[2][2]-ay[1][2]*ay[2][0];

int my13=ay[1][0]*ay[2][1]-ay[1][1]*ay[2][0];

int cy11=pow(-1,2)*my11;
int cy12=pow(-1,3)*my12;
int cy13=pow(-1,4)*my13;
int detAy=ay[0][0]*cy11+ay[0][1]*cy12+ay[0][2]*cy13;
for(int i=0;i<3;i++){
   std::cout<<"\n";
  for(int j=0;j<3;j++)
     std::cout<<ay[i][j]<<" ";
}
std::cout<<" \n"<<detAy;

//solving for z
int az[3][3];
for(int i=0;i<3;i++)
  for(int j=0;j<3;j++)
     az[i][j]=a[i][j];
for (int i=0;i<3;i++)
   az[i][2]=b[i][0];

int mz11=az[1][1]*az[2][2]-az[1][2]*az[2][1];

int mz12= az[1][0]*az[2][2]-az[1][2]*az[2][0];

int mz13=az[1][0]*az[2][1]-az[1][1]*az[2][0];

int cz11=pow(-1,2)*mz11;
int cz12=pow(-1,3)*mz12;
int cz13=pow(-1,4)*mz13;
int detAz=az[0][0]*cz11+az[0][1]*cz12+az[0][2]*cz13;
for(int i=0;i<3;i++){
   std::cout<<"\n";
  for(int j=0;j<3;j++)
     std::cout<<az[i][j]<<" ";
}
std::cout<<" \n"<<detAz;
std::cout<<"\nx ="<<detAx/detA;

std::cout<<" y ="<<detAy/detA;

std::cout<<" z ="<<detAz/detA;


return 0;
}
