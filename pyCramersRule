
######################################
#pyCramersRule: Python equivalent of C++ program CramersRule
#this code is  created by Rezaul Hoque on December 20,2022;
#contact:jewelmrh@yahoo.com;rhoque4478@gmail.com;Dhaka,Bangladesh;https://rezaulhoque.wordpress.com,https://hoquestake.blogspot.com
#note: codes shared by Rezaul Hoque on github are not for sale; they are created and shared to facilitate the algorithm learning process; many like Hoque use this platform to practice programming ;Rezaul hopes his contribution helps others to fine tune their learning;
#####################################

a=[[5,-3,2],[-2,3,-5],[4,-5,6]]
b=[[16],[2],[7]]

for i in range(0,3):
    print("\n")
    for j in range(0,3):
       print(a[i][j],end=" ")

for i in range (0,3):
  print (" \n")
  for j in range (0,1):
     print(b[i][j],end=" ")


m11=a[1][1]*a[2][2]-a[1][2]*a[2][1]
m12= a[1][0]*a[2][2]-a[1][2]*a[2][0]
m13=a[1][0]*a[2][1]-a[1][1]*a[2][0]

c11=pow(-1,2)*m11
c12=pow(-1,3)*m12
c13=pow(-1,4)*m13
detA=a[0][0]*c11+a[0][1]*c12+a[0][2]*c13

print(" \ndetA: ",detA)

#solving for x
rx,cx=(3,3)
ax=[[0]*cx]*rx
ax=list(map(list,a))
rb,cb=(3,1)
bx=[[0]*cb]*rb
bx=list(map(list, b))



for i in range(0,3):
    for j in range(0,1):
        ax[i][j] = bx[i][j]


mx11=ax[1][1]*ax[2][2]-ax[1][2]*ax[2][1]
mx12= ax[1][0]*ax[2][2]-ax[1][2]*ax[2][0]
mx13=ax[1][0]*ax[2][1]-ax[1][1]*ax[2][0]

cx11=pow(-1,2)*mx11
cx12=pow(-1,3)*mx12
cx13=pow(-1,4)*mx13
detAx=ax[0][0]*cx11+ax[0][1]*cx12+ax[0][2]*cx13

for i in range(0,3):
    print("\n")
    for j in range(0,3):
       print(ax[i][j],end=" ")

print(" \ndetAx: ",detAx)

#solving for y
cy,ry=(3,3)
ay=[[0]*cy]*ry
ay=list(map(list,a))
rb2,cb2=(3,1)
by=[[0]*cb2]*rb2
by=list(map(list, b))



for i in range(0,3):
        ay[i][1] = bx[i][0]


my11=ay[1][1]*ay[2][2]-ay[1][2]*ay[2][1]
my12= ay[1][0]*ay[2][2]-ay[1][2]*ay[2][0]
my13=ay[1][0]*ay[2][1]-ay[1][1]*ay[2][0]

cy11=pow(-1,2)*my11
cy12=pow(-1,3)*my12
cy13=pow(-1,4)*my13
detAy=ay[0][0]*cy11+ay[0][1]*cy12+ay[0][2]*cy13

for i in range(0,3):
    print("\n")
    for j in range(0,3):
       print(ay[i][j],end=" ")

print(" \ndetAx: ",detAy)

#solving for z
cz,rz=(3,3)
az=[[0]*cz]*rz
az=list(map(list,a))
rb3,cb3=(3,1)
bz=[[0]*cb3]*rb3
bz=list(map(list, b))



for i in range(0,3):
        az[i][2] = bz[i][0]


mz11=az[1][1]*az[2][2]-az[1][2]*az[2][1]
mz12= az[1][0]*az[2][2]-az[1][2]*az[2][0]
mz13=az[1][0]*az[2][1]-az[1][1]*az[2][0]

cz11=pow(-1,2)*mz11
cz12=pow(-1,3)*mz12
cz13=pow(-1,4)*mz13

detAz=az[0][0]*cz11+az[0][1]*cz12+az[0][2]*cz13

for i in range(0,3):
    print("\n")
    for j in range(0,3):
       print(az[i][j],end=" ")

print(" \ndetAz: ",detAz)

print("\nx: ",detAx/detA)
print("\ny: ",detAy/detA)
print("\nz: ",detAz/detA)










