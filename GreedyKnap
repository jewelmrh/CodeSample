
/////////////////////////////////////////////////////////////////////////////////////////////////
//GreedyKnap: fractional Knapsack problem
//this code is  created by Rezaul Hoque on February 12,2022;
//contact:jewelmrh@yahoo.com;rhoque4478@gmail.com;Dhaka,Bangladesh;https://rezaulhoque.wordpress.com,https://hoquestake.blogspot.com
//note: codes shared by Rezaul Hoque on github are not for sale; they are created and shared to facilitate the algorithm learning process; many like Hoque use this platform to practice programming ;Rezaul hopes his contribution helps others to fine tune their learning;
/////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>

class Knap{
public:
int v,w;
double r=(double) v/w;

Knap(int a,int b){v=a;w=b;}

};

void sort(Knap x,Knap y){
if(x.r>y.r){
 Knap temp=x;
x=y;
y=temp;
}
}

double greedKnap(int cap,Knap a[],int n){
for(int i=0;i<n;i++)
sort(a[i],a[i+1]);

double res=0.0;
int i=0;
while (i<n){
if(a[i].w<=cap){

cap -=a[i].w;
res +=a[i].v;
}
else{
  res += a[i].v*((double)cap/(double)a[i].w);
 break;
}
i++;
}
return res;
}

int main()
{int cap= 50;
    Knap s[] = { { 60, 10},{100, 20}, { 120, 30} };
 
    int n = sizeof(s) / sizeof(s[0]);
    
    std::cout <<greedKnap(cap,s,n);
return 0;
}
